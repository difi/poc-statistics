#!/usr/bin/env bash

configNameInndata=inndata-api-properties
configNameUtdata=utdata-api-properties
secretNameInndata=inndata-api-elasticcloud-api-key
secretNameUtdata=utdata-api-elasticcloud-api-key-31122022

syntax="[d|c|r], deploy (docker), configure (properties), remove (properties)"

if [ -z "${1}" ]; then
  echo "usage: ${0} ${syntax}"
  exit 0
fi

if [ "${1}" = "d" ]; then
    echo "Deploy"

    export DOCKER_REGISTRY=local
    export DOCKER_IMAGE_VERSION=local-${RANDOM}
    export STACK_NAME=statistics-api

    mvn package \
        -Dno.difi.jenkins-pipeline.docker-registry=${DOCKER_REGISTRY} \
        -Dno.difi.jenkins-pipeline.docker-image-version=${DOCKER_IMAGE_VERSION} \
        -DskipTests || exit 1

    VERSION=${DOCKER_IMAGE_VERSION} REGISTRY=${DOCKER_REGISTRY} \
        docker stack deploy -c docker/stack.yml --prune --resolve-image=never ${STACK_NAME} || exit 1
    VERSION=${DOCKER_IMAGE_VERSION} REGISTRY=${DOCKER_REGISTRY} \
        docker stack deploy -c docker/stack-local.yml --resolve-image=never ${STACK_NAME} || exit 1
    echo "Deployed services using locally built image(s) with tag ${DOCKER_IMAGE_VERSION}"

    exit 0
fi

if [ "${1}" = "c" ]; then

ut_api_key="fakeKey"
inn_api_key="fakeKey"
inndata_api_id="8yQm93cBNa9aEm3gDJZ0"
utdata_api_id="PyqRonkBrQvCER-VpdCh"
configString="no.difi.statistics.elasticsearch.host = elasticsearch
no.difi.statistics.elasticsearch.port = 9200
spring.security.oauth2.resourceserver.jwt.issuer-uri = https://test1.maskinporten.no/
spring.security.oauth2.resourceserver.jwt.jwk-set-uri = https://test1.maskinporten.no/jwk"

#Config below to ElasticCloud test environment and ver2 maskinporten:
#configString="no.difi.statistics.elasticsearch.host = 7834108d7d5d491587be2a1a9452d636.northeurope.azure.elastic-cloud.com
#no.difi.statistics.elasticsearch.port = 9243
#spring.security.oauth2.resourceserver.jwt.issuer-uri = https://ver2.maskinporten.no/
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri = https://ver2.maskinporten.no/jwk"

    if [ -z $(docker config ls -qf name=${configNameInndata}) ]; then
        read -p "No configuration found for ${configNameInndata}. Do you want me to create one? [Y/n] " answer
        [[ -z ${answer} ]] && answer='y'
        [[ ${answer} =~ [yY] ]] && { echo -n "${configString}" | docker config create ${configNameInndata} -; } || { exit 1; }
    else
        echo "Already a configuration named ${configNameInndata}"
    fi

    if [ -z $(docker config ls -qf name=${configNameUtdata}) ]; then
        read -p "No configuration found for ${configNameUtdata}. Do you want me to create one? [Y/n] " answer
        [[ -z ${answer} ]] && answer='y'
        [[ ${answer} =~ [yY] ]] && { echo -n "${configString}" | docker config create ${configNameUtdata} -; } || { exit 1; }
    else
        echo "Already a configuration named ${utdataConfigName}"
    fi

    if [ -z $(docker secret ls -qf name=${secretNameInndata}) ]; then
        read -p "No secret found for ${secretNameInndata}. Do you want me to create one? [Y/n] " answer
        [[ -z ${answer} ]] && answer='y'
        [[ ${answer} =~ [yY] ]] && { echo -n "${inndata_api_id}:${inn_api_key}" | base64 | docker secret create ${secretNameInndata} -; } || { exit 1; }
    else
        echo "Already a secret named ${secretNameInndata}"
    fi

    if [ -z $(docker secret ls -qf name=${secretNameUtdata}) ]; then
        read -p "No secret found for ${secretNameUtdata}. Do you want me to create one? [Y/n] " answer
        [[ -z ${answer} ]] && answer='y'
        [[ ${answer} =~ [yY] ]] && { echo -n "${utdata_api_id}:${ut_api_key}" | base64 | docker secret create ${secretNameUtdata} -; } || { exit 1; }
    else
        echo "Already a secret named ${secretNameUtdata}"
    fi

    exit 0
fi

if [ "${1}" = "r" ]; then
    echo "Remove docker config properties"
    [[ -z $(docker config ls -qf name=${configNameInndata}) ]] || docker config rm ${configNameInndata}
    [[ -z $(docker config ls -qf name=${configNameUtdata}) ]] || docker config rm ${configNameUtdata}

    echo "Remove docker secrets"
    [[ -z $(docker secret ls -qf name=${secretNameInndata}) ]] || docker secret rm ${secretNameInndata}
    [[ -z $(docker secret ls -qf name=${secretNameUtdata}) ]] || docker secret rm ${secretNameUtdata}

    exit 0
fi

if [ -n "${1}" ]; then
  echo "usage: ${0} ${syntax}"
  exit 0
fi
